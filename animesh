#! /bin/bash

###################################################################################################
#                                                                                                 #
#   Author:    fmash16                                                                            #
#   Created:   14.09.2021                                                                         #
#                                                                                                 #
###################################################################################################

# User configs ----------------------------------------------------------------------------------

image_preview=1     # 0 to turn off, 1 to turn on

#------------------------------------------------------------------------------------------------

# ansi color sequences
green="\033[32m"
red="\033[31m"
yellow="\033[33m"
magenta="\033[35m"
cyan="\033[36m"
reset="\033[0m"

# Get terminal properties
term_width=$(stty size | cut -d" " -f2)
term_height=$(stty size | cut -d" " -f1)
set +m

# Reduce witdth, to align anime cover image with the greeting image
if [[ $term_width -gt 120 ]];then
    term_width=118
fi

# Use ueberzug for image preview
function view_image {
    ueberzug layer --parser bash 0< <(
        declare -Ap add_command=([action]="add" [identifier]="example0" [x]="$2" [y]="$3" [max_width]="$5" [max_height]="$4" [path]="$1")
        sleep 36000
    )
}

# greeting image
clear
if [[ $term_height -lt 35 ]]; then
    # if terminal height too small, resize image 
    img_height=$((term_height/4)) 
else if [[ $term_height -lt 25 ]]; then
    image_preview=0
else
    img_height=17
fi
fi

if [[ $image_preview -eq 1 ]]; then
    view_image "$HOME/.config/animesh/greet.png" 0 1 $img_height $term_width &

    # enter padding after greet image
    { command; while :; do echo; done; } | head -n $((img_height+1))
fi
echo -e "$yellow----------------  KONNICHIWA SENPAI ---------------------$reset"

# Init
if [ ! -d "$HOME/.config/animesh" ]; then
    mkdir $HOME/.config/animesh
fi

watching_file="$HOME/.config/animesh/watching"
plan_file="$HOME/.config/animesh/plan"

#--------------------------------------------------------------------------------------------------
# App
#--------------------------------------------------------------------------------------------------

gogo="https://gogoanime.pe"
search_url="https://gogoanime.pe//search.html?keyword="

function search_anime {
    echo -en  "$cyan> Enter search keyword: $reset"
    read search_keyword
    echo -e "\n$green[+]$reset Searching...."
    # Replace whitespaces with + for url request
    search_keyword=`echo $search_keyword | sed -e "s/\ /+/g"`

    # Make search request url
    search_request_url=$search_url$search_keyword

    # Get the search results
    IFS=$'\n'               # Set delimiter \n
    results=(`curl -s "$search_request_url" | grep -i "<p class=\"name\">"`)
    result_no=$((${#results[*]}-1))   # number of search results returned
    if [[ $result_no -lt 0 ]]; then
        echo -e "$red[-] No results found! Make sure to correctly type the name.\n$reset"
        search_anime
    fi

    # Store result names and respective links
    names=()
    links=()
    for i in $(seq 0 $result_no); do
        names+=(`awk -F 'title="' '{print $2}' <<< ${results[$i]} | cut -d\" -f 1`)
        links+=($gogo`awk -F 'href="' '{print $2}' <<< ${results[$i]} | cut -d\" -f 1`)
    done

}

function select_anime {
    # Print results and prompt for number of anime to open
    echo -e "\n$green# RESULTS:$reset"
    for i in $(seq 0 $result_no); do
        echo -e "    $yellow[$i]$reset ${names[$i]}"
    done 

    echo -en "$cyan\n> Enter the number of the anime to watch (0-$result_no): $reset"
    read select_no

    link_url=${links[$select_no]}
    anime=${names[$select_no]}

    # Anime cover 
    if [[ $term_height -lt 35 ]]; then
        # if terminal height too small, don't show cover
        image_preview=0
    fi
    if [[ $image_preview -eq 1 ]];then
        # clear the screen
        clear
        { command; while :; do echo; done; } | head -n 18 

        cover=`curl -s "$link_url" | grep -A 1 -i "anime_info_body_bg" | awk -v FS="(src=\"|\">)" '{print $2}'`
        wget -q $cover -O /tmp/cover.jpg && \
        view_image "/tmp/cover.jpg" $(($term_width-25)) 19 25 25 &
        img_pid=`ps ax | grep "sleep 3600" | tail -n2 | head -n1 | cut -d" " -f1`
    fi


    # Anime details
    echo -e "$green## $anime
========================================================$reset"
    #plot=`curl -s "$link_url" | grep -A 3 -i "plot summary" | awk -v FS="(</span>|</p>)" '{print $2}'`
    #echo -e "$plot"
}

function get_ep {
    total_episodes=`curl -s "$link_url" | grep -m 1 -i "ep_end" | 
        cut -d\> -f2 | cut -d\< -f1 | cut -f1 | cut -d\- -f2`
    echo -e "$magenta   Total Number of episodes: $total_episodes $reset"

    while true; do

        echo -e "
$green# Actions:
    $yellow[1-$total_episodes]$reset Episode number to watch
    $yellow[b]$reset Go back 

    $yellow[w]$reset Add anime to current watching list
    $yellow[f]$reset Add anime to future watch list
    $yellow[r]$reset Remove from all lists
    $yellow[h]$reset Go home
    $reset"

        echo -en "$cyan> Input : $reset"
        read ep_action

        case $ep_action in
            b)
                select_anime 
                kill -13 $img_pid
                get_ep
                break
                ;;
            w)
                echo "$anime##$link_url" >> $watching_file
                echo -e "$green[+]$reset $anime Added to watching list"
                ;;
            f)
                echo "$anime##$link_url" >> $plan_file
                echo -e "$green[+]$reset $anime Added to plan to watch list"
                ;;
            r)
                escaped_anime=$(printf '%s\n' "$anime" | sed -e 's/[]\/$*.^[]/\\&/g');
                sed -i "/$escaped_anime/d" $watching_file
                sed -i "/$escaped_anime/d" $plan_file
                echo -e "$green[+]$reset $anime Removed from list"
                ;;
            h)
                kill -13 $img_pid
                main
                ;;
            *)
                if [[ "$ep_action" =~ ^[0-9]{1,3}$ ]]; then
                    ep_no=$ep_action
                    watch_episode $link_url $ep_no
                    break
                else
                    echo -e "INPUT ERROR!"
                fi
                ;;
        esac
    done
}

function watch_episode {
    # Takes the link of the anime "link_url" and the episode number "ep_no" to
    # watch. Gets the download link of the episode and plays in in mpv

    ep_url=`echo $1 | sed "s/category\///g"`-episode-$2

    download_page_url=`curl -s "$ep_url" | grep -i "streamani.io/download" |
        grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*"`
        #grep -zoP '<a[^<]*[^<]*href="\K[^"]+'`    # get the href link

    download_link=(`curl -s "$download_page_url" | grep -i "Download" | 
        grep -i "storage.google" | cut -d\" -f2 | cut -d\" -f1`)

    # Run episode in mpv
    echo -e "$green\n[+] Playing episode..... $reset"
    mpv --demuxer-thread=yes --demuxer-readahead-secs=300 ${download_link[0]}
}

function next_action {
    echo -e "
$green# Actions:
    $yellow[n]$reset Watch next episode
    $yellow[p]$reset Watch previous episode
    $yellow[e]$reset Enter new episode number to watch / add anime to list
    $yellow[h]$reset Go home
    $yellow[q]$reset Quit
    $reset"
    # Next action
    echo -en "$cyan> Input: $reset"
    read next_act

    case $next_act in
        n)
            ep_no=$(($ep_no+1))
            watch_episode $link_url $ep_no
            ;;
        p)
            ep_no=$(($ep_no-1))
            watch_episode $link_url $ep_no
            ;;
        e)
            get_ep $link_url
            watch_episode $link_url $ep_no
            ;;
        w)
            echo "$anime##$link_url" >> $watching_file
            echo -e "$green[+]$reset $anime Added to watching list"
            ;;
        f)
            echo "$anime##$link_url" >> $plan_file
            echo -e "$green[+]$reset $anime Added to plan to watch list"
            ;;
        r)
            escaped_anime=$(printf '%s\n' "$anime" | sed -e 's/[]\/$*.^[]/\\&/g');
            sed -i "/$escaped_anime/d" $watching_file
            sed -i "/$escaped_anime/d" $plan_file
            echo -e "$green[+]$reset $anime Removed from list"
            ;;
        h)
            kill -13 $img_pid
            main
            ;;
        q)
            echo -e "$red ----------------- SAYONARA ;-; -------------------- $reset"
            exit
            ;;
        *)
            echo "ERROR!"
            ;;
    esac
}

function view_watchlist {
    #while IFS= read -r line; do
    i=0
    names=()
    links=()

    # Show currently watching anime

    echo -e "$green# Watching:$reset"

    while IFS= read -r line; do
        if [ -d "$watching_file" ]; then
            echo -e "No anime in currently watching list."
            break
        fi

        names+=("`awk -F '##' '{print $1}' <<< $line`")
        links+=("`awk -F '##' '{print $2}' <<< $line`")

        echo -e "    $yellow[$i]$reset ${names[$i]}"
        i=$((i+1))
    done < "$watching_file"

    # Show plan to watch anime

    echo -e "\n$green# Plan to watch:$reset"

    while read -r line; do
        if [ -d "$plan_file" ]; then
            echo -e "No anime in plan to watch list."
            break
        fi

        names+=("`awk -F '##' '{print $1}' <<< $line`")
        links+=("`awk -F '##' '{print $2}' <<< $line`")

        echo -e "    $yellow[$i]$reset ${names[$i]}"
        i=$((i+1))
    done < "$plan_file"

    result_no=$((i-1))

}



function main {

    # Prompt for action
    echo -e "
$green# What do you want to do?
    $yellow[s]$reset  Search
    $yellow[c]$reset  Continue watching
    $yellow[v]$reset  View watch list
    $reset"

    echo -ne "$cyan> Input: $reset"
    read action
    echo "" 

    case $action in
        s)
            search_anime
            select_anime
            get_ep $link_url
            #watch_episode $link_url $ep_no
            ;;
        c)
            continue_watch
            ;;
        v)
            view_watchlist
            select_anime
            get_ep $link_url
            #watch_episode $link_url $ep_no
            ;;
        *)
            echo "ERROR!"
    esac

    while true; do
        next_action
    done
}

main
echo "SAYONARA ;-;"
